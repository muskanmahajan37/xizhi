{"version":3,"sources":["components/Editor/StyleButton.tsx","commons/constants/poem.ts","components/Editor/XizhiSidebar.tsx","pages/home/HomePage.tsx","pages/about/AboutPage.tsx","pages/todo/context.ts","pages/todo/components/TodoForm.tsx","pages/todo/reducer.ts","pages/todo/components/TodoHeader.tsx","pages/todo/components/TodoList.tsx","pages/todo/TodoPage.tsx","commons/hooks/usePersist.ts","components/NavBar/NavBar.tsx","App.tsx","serviceWorker.ts","index.tsx","pages/about/AboutPage.module.css"],"names":["StyleButton","props","onToggle","e","preventDefault","style","className","this","active","onMouseDown","label","React","Component","POEM","XizhiSidebar","editorState","blockArray","getCurrentContent","getBlocksAsArray","length","str","getPlainText","Math","round","sLen","replace","getReadingTime","getWordCount","getLineCount","BLOCK_TYPES","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","map","type","key","has","BlockStyleControls","selection","getSelection","blockType","getBlockForKey","getStartKey","getType","HomePage","onChange","setState","focus","state","EditorState","createWithContent","ContentState","createFromText","RichUtils","toggleBlockType","inlineStyle","toggleInlineStyle","getDefaultKeyBinding","command","newState","handleKeyCommand","block","console","log","contentState","hasText","getBlockMap","first","bind","onClick","keyBindingFn","mapKeyToEditorCommand","blockStyleFn","getBlockStyle","AboutPage","styles","base","Store","createContext","todos","TodoForm","dispatch","useContext","useState","todo","setTodo","handleTodoAdd","payload","value","autoFocus","placeholder","onKeyUp","event","keyCode","target","reducer","action","includes","filter","t","TodoHeader","children","TodoList","count","header","marginLeft","TodoPage","globalStore","context","persistedContext","localStorage","getItem","JSON","parse","usePersistedContext","TodoStore","useEffect","setItem","stringify","usePersistedReducer","useReducer","Provider","NavBar","current","handleClick","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.2614fde4.chunk.js","sourcesContent":["import React from \"react\";\n\nexport class StyleButton extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  onToggle = (e: any) => {\n    e.preventDefault();\n    this.props.onToggle(this.props.style);\n  };\n\n  render() {\n    let className = 'RichEditor-styleButton';\n    if (this.props.active) {\n      className += ' RichEditor-activeButton';\n    }\n    return (\n      <span className={className} onMouseDown={this.onToggle}>\n              {this.props.label}\n            </span>\n    );\n  }\n}\n","export const POEM = `永和九年，岁在癸丑，暮春之初，会于会稽山阴之兰亭，修稧（禊）事也。群贤毕至，少长咸集。此地有崇山峻领（岭），茂林修竹；又有清流激湍，映带左右，引以为流觞曲水，列坐其次。虽无丝竹管弦之盛，一觞一咏，亦足以畅叙幽情。\n\n是日也，天朗气清，惠风和畅。仰观宇宙之大，俯察品类之盛。所以游目骋怀，足以极视听之娱，信可乐也。\n\n夫人之相与，俯仰一世，或取诸怀抱，悟言一室之内；或因寄所托，放浪形骸之外。虽趣（取/趋）舍万殊，静躁不同，当其欣于所遇，暂得于己，怏然自足，不知老之将至；及其所之既倦，情随事迁，感慨系之矣。向之所欣，俯仰之间，已为陈迹，犹不能不以之兴怀；况修短随化，终期于尽。古人云：“死生亦大矣。”岂不痛哉！\n\n每揽（览）昔人兴感之由，若合一契，未尝不临文嗟悼，不能喻之于怀。固知一死生为虚诞，齐彭殇为妄作。后之视今，亦由（犹）今之视昔，悲夫！故列叙时人，录其所述，虽世殊事异，所以兴怀，其致一也。后之揽（览）者，亦将有感于斯文。\n`;\n\n","import React from \"react\";\nimport Draft, {EditorState} from \"draft-js\";\n\nimport './XizhiSidebar.css';\n\nexport class XizhiSidebar extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  getLineCount(editorState: EditorState) {\n    const blockArray = editorState.getCurrentContent().getBlocksAsArray();\n    return blockArray ? blockArray.length : null;\n  }\n\n  getReadingTime(editorState: EditorState) {\n    let str = editorState.getCurrentContent().getPlainText('');\n    return `~${Math.round(str.length / 400)} 分钟`; // 400/minute\n  }\n\n  getWordCount(editorState: EditorState) {\n    // https://blog.csdn.net/gavid0124/article/details/38117381\n    let str = editorState.getCurrentContent().getPlainText('');\n    let sLen = 0;\n    try {\n      //先将回车换行符做特殊处理\n      str = str.replace(/(\\r\\n+|\\s+|　+)/g, \"龘\");\n      //处理英文字符数字，连续字母、数字、英文符号视为一个单词\n      str = str.replace(/[\\x00-\\xff]/g, \"m\");\n      //合并字符m，连续字母、数字、英文符号视为一个单词\n      str = str.replace(/m+/g, \"*\");\n      //去掉回车换行符\n      str = str.replace(/龘+/g, \"\");\n      //返回字数\n      sLen = str.length;\n    } catch (e) {\n      return '';\n    }\n    return sLen;\n  }\n\n  render() {\n    const editorState: EditorState = this.props.editorState;\n    return (\n      <div className=\"xizhi-sidebar\">\n        <span>Toolbar</span>\n        <div className=\"stats\">\n          <p className=\"counts\">\n            阅读时间：{this.getReadingTime(editorState)};\n          </p>\n          <p className=\"counts\">\n            字数：{this.getWordCount(editorState)};\n          </p>\n          <p className=\"counts\">\n            行数：{this.getLineCount(editorState)};\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {Editor, EditorState, ContentState, RichUtils, getDefaultKeyBinding} from 'draft-js';\nimport {StyleButton} from '../../components/Editor/StyleButton';\nimport {POEM} from \"../../commons/constants/poem\";\nimport {XizhiSidebar} from '../../components/Editor/XizhiSidebar';\n\nconst BLOCK_TYPES = [\n  {label: 'H1', style: 'header-one'},\n  {label: 'H2', style: 'header-two'},\n  {label: 'H3', style: 'header-three'},\n  {label: 'Quote', style: 'blockquote'},\n  {label: \"Bullets\", style: \"unordered-list-item\"},\n  {label: \"Numbers\", style: \"ordered-list-item\"}\n];\n\nconst INLINE_STYLES = [\n  {label: 'Bold', style: 'BOLD'},\n  {label: 'Italic', style: 'ITALIC'}\n];\n\nconst InlineStyleControls = (props: any) => {\n  const currentStyle = props.editorState.getCurrentInlineStyle();\n\n  return (\n    <div className=\"xizhi-inline-controls\">\n      {INLINE_STYLES.map((type) =>\n        <StyleButton\n          key={type.label}\n          active={currentStyle.has(type.style)}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      )}\n    </div>\n  );\n};\n\nconst BlockStyleControls = (props: any) => {\n  const {editorState} = props;\n  const selection = editorState.getSelection();\n  const blockType = editorState\n    .getCurrentContent()\n    .getBlockForKey(selection.getStartKey())\n    .getType();\n  return (\n    <div className=\"xizhi-block-controls\">\n      {BLOCK_TYPES.map((type) =>\n        <StyleButton\n          key={type.label}\n          active={type.style === blockType}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      )}\n    </div>\n  );\n};\n\nclass HomePage extends React.Component <{}, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      editorState: EditorState.createWithContent(\n        ContentState.createFromText(POEM)\n      )\n    };\n  }\n\n  onChange = (editorState: EditorState) => {\n    return this.setState({editorState});\n  };\n\n  toggleBlockType(blockType: any) {\n    this.onChange(\n      RichUtils.toggleBlockType(\n        this.state.editorState,\n        blockType\n      )\n    );\n  }\n\n  toggleInlineStyle(inlineStyle: any) {\n    this.onChange(\n      RichUtils.toggleInlineStyle(\n        this.state.editorState,\n        inlineStyle\n      )\n    );\n  }\n\n  focus = () => {\n    // return this.refs.editor.focus();\n  };\n\n  mapKeyToEditorCommand(e: any) {\n    return getDefaultKeyBinding(e);\n  }\n\n  handleKeyCommand(command: any, editorState: EditorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return \"handled\";\n    }\n    return \"not-handled\";\n  }\n\n  getBlockStyle(block: any) {\n    switch (block.getType()) {\n      case 'blockquote':\n        return 'RichEditor-blockquote';\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    console.log(this.state);\n    const {editorState} = this.state;\n\n    // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n    let className = 'RichEditor-editor';\n    var contentState = editorState.getCurrentContent();\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n        className += ' RichEditor-hidePlaceholder';\n      }\n    }\n\n    return (\n      <div className=\"Xizhi-container\">\n        <div className=\"XizhiEditor-root\">\n          <div className=\"xizhi-toolbar\">\n            <InlineStyleControls\n              editorState={editorState}\n              onToggle={this.toggleInlineStyle.bind(this)}\n            />\n            <BlockStyleControls\n              editorState={editorState}\n              onToggle={this.toggleBlockType.bind(this)}\n            />\n          </div>\n          <div className={className} onClick={this.focus}>\n            <Editor\n              editorState={editorState}\n              handleKeyCommand={this.handleKeyCommand.bind(this)}\n              keyBindingFn={this.mapKeyToEditorCommand.bind(this)}\n              blockStyleFn={this.getBlockStyle.bind(this)}\n              onChange={this.onChange}/>\n          </div>\n        </div>\n        <XizhiSidebar editorState={editorState}/>\n      </div>\n    )\n  };\n}\n\nexport default HomePage;\n","import React, { Component } from 'react';\nimport styles from './AboutPage.module.css';\n\nclass AboutPage extends Component {\n  render() {\n    return (\n      <div className={styles.base}>\n        about\n      </div>\n    )\n  };\n}\n\nexport default AboutPage;\n","import React from \"react\";\n\nconst Store = React.createContext({\n  todos: [\n    \"Buy milk\",\n    \"Some eggs\",\n    \"Go to work\"\n  ]\n});\n\nexport default Store;\n","import React, {useContext, useState} from 'react';\nimport Store from \"../context\";\n\nexport default function TodoForm() {\n  const { dispatch } = useContext(Store) as any;\n\n  // Creating a local state to have currently writing\n  // todo item that will be sent to the global store.\n  const [todo, setTodo] = useState(\"\");\n\n  function handleTodoChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setTodo(e.target.value);\n  }\n\n  function handleTodoAdd() {\n    dispatch({ type: \"ADD_TODO\", payload: todo });\n    setTodo(\"\");\n  }\n\n  function handleSubmitForm(event: any) {\n    if (event.keyCode === 13) handleTodoAdd();\n  }\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-12\">\n        <br />\n        <div className=\"input-group\">\n          <input\n            className=\"form-control\"\n            value={todo}\n            autoFocus={true}\n            placeholder=\"Enter new todo\"\n            onKeyUp={handleSubmitForm}\n            onChange={handleTodoChange}\n          />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-primary\" onClick={handleTodoAdd}>\n              Add\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","export default function reducer(state: any, action: any) {\n  switch (action.type) {\n    case \"ADD_TODO\":\n      // return current state if empty\n      if (!action.payload) {\n        return state;\n      }\n      // return current state if duplicate\n      if (state.todos.includes(action.payload)) {\n        return state;\n      }\n      return {\n        ...state,\n        todos: [...state.todos, action.payload]\n      };\n    case \"COMPLETE\":\n      return {\n        ...state,\n        todos: state.todos.filter((t: any) => {\n          return t !== action.payload\n        })\n      };\n    default:\n      return state;\n  }\n}\n","import React from \"react\";\n\nexport const TodoHeader = (props: any) => (\n  <div className=\"row\">\n    <div className=\"col-md-8\">\n      <h5>Todo List</h5>\n    </div>\n    <div className=\"col-md-4\">\n      {props.children}\n    </div>\n  </div>\n);\n","import React, { useContext } from \"react\";\nimport Store from \"../context\";\nimport { TodoHeader } from \"./TodoHeader\";\n\nexport default function TodoList() {\n  // @ts-ignore\n  const { state, dispatch } = useContext(Store);\n\n  const pluralize = (count: any) =>\n    count > 1 ? `There are ${count} todos.` : `There is ${count} todo.`;\n\n  let header =\n    state.todos.length === 0 ? (\n      <h4>Yay! All todos are done! Take a rest!</h4>\n    ) : (\n      <TodoHeader>\n        <span className=\"float-right\">{pluralize(state.todos.length)}</span>\n      </TodoHeader>\n    );\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-12\">\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <br />\n            {header}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <ul className=\"list-group\">\n              {state.todos.map((t: any) => (\n                <li key={t} className=\"list-group-item\">\n                  {t}\n                  <button\n                    className=\"float-right btn btn-danger btn-sm\"\n                    style={{ marginLeft: 10 }}\n                    onClick={() => dispatch({ type: \"COMPLETE\", payload: t })}\n                  >\n                    Complete\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, {useContext, useReducer} from 'react';\n\nimport TodoForm from \"./components/TodoForm\";\nimport {usePersistedContext, usePersistedReducer} from \"../../commons/hooks/usePersist\";\nimport TodoStore from \"./context\";\nimport reducer from \"./reducer\";\nimport TodoList from \"./components/TodoList\";\n\nfunction TodoPage() {\n  // create a global store to store the state\n  const globalStore = usePersistedContext(useContext(TodoStore), \"state\");\n\n  // `todos` will be a state manager to manage state.\n  const [state, dispatch, todos] = usePersistedReducer(\n    useReducer(reducer, globalStore),\n    \"state\" // The localStorage key\n  );\n\n  return (\n    // @ts-ignore\n    <TodoStore.Provider value={{state, dispatch, todos}}>\n      <TodoForm />\n      <TodoList />\n    </TodoStore.Provider>\n  );\n}\n\nexport default TodoPage;\n","import {useEffect} from \"react\";\n\nexport function usePersistedContext(context: any, key = \"state\") {\n  const persistedContext = localStorage.getItem(key);\n  return persistedContext ? JSON.parse(persistedContext) : context;\n}\n\nexport function usePersistedReducer([state, dispatch]: any, key = \"state\") {\n  useEffect(() => localStorage.setItem(key, JSON.stringify(state)), [key, state]);\n  return [state, dispatch];\n}\n","import React, {Component} from 'react';\nimport {Menu, Icon} from 'antd';\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\nimport HomePage from '../../pages/home/HomePage';\nimport AboutPage from \"../../pages/about/AboutPage\";\nimport TodoPage from \"../../pages/todo/TodoPage\";\n\nclass NavBar extends Component {\n  state = {\n    current: 'mail',\n  };\n\n  handleClick = (e: any) => {\n    console.log('click ', e);\n    this.setState({\n      current: e.key,\n    });\n  };\n\n  render() {\n    return (\n      <Router>\n        {/*<Menu onClick={this.handleClick} selectedKeys={[this.state.current]} mode=\"horizontal\">*/}\n        {/*  <Menu.Item key=\"app\">*/}\n        {/*    <Link to=\"/\"><Icon type=\"home\"/> Home</Link>*/}\n        {/*  </Menu.Item>*/}\n        {/*  <Menu.Item key=\"about\">*/}\n        {/*    <Link to=\"/about\"><Icon type=\"question\"/>About</Link>*/}\n        {/*  </Menu.Item>*/}\n        {/*  <Menu.Item key=\"todo\">*/}\n        {/*    <Link to=\"/todo\"><Icon type=\"todo\"/>Todo</Link>*/}\n        {/*  </Menu.Item>*/}\n        {/*</Menu>*/}\n\n        <Route exact path=\"/\" component={HomePage}/>\n        <Route exact path=\"/about\" component={AboutPage}/>\n        <Route exact path=\"/todo\" component={TodoPage}/>\n      </Router>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from 'react';\n\nimport './App.css';\nimport NavBar from \"./components/NavBar/NavBar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar></NavBar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"base\":\"AboutPage_base__24ewQ\"};"],"sourceRoot":""}